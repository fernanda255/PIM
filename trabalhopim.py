import json
import hashlib
import time
import statistics
import os
import re
from getpass import getpass  # para ocultar a senha
 
DB_FILE = "usuarios.json"
TERMO_LGPD = "Ao se cadastrar, voc√™ aceita os termos da LGPD e autoriza o uso de seus dados apenas para fins educacionais e estat√≠sticos."
 
def carregar_dados():
    if not os.path.exists(DB_FILE):
        return {}
    try:
        with open(DB_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError:
        print("‚ö†Ô∏è Arquivo de dados corrompido. Ser√° recriado.")
        return {}
 
def salvar_dados(dados):
    with open(DB_FILE, "w", encoding="utf-8") as f:
        json.dump(dados, f, indent=4)
 
def hash_senha(senha):
    return hashlib.sha256(senha.encode()).hexdigest()
 
def email_valido(email):
    padrao = r"^[\w\.-]+@[\w\.-]+\.\w+$"
    return re.match(padrao, email) is not None
 
def cadastrar_usuario():
    print("\nüë§ Cadastro de Usu√°rio")
    nome = input("Nome: ")
 
    while True:
        try:
            idade = int(input("Idade: "))
            if idade > 0:
                break
            print("Idade deve ser um n√∫mero positivo.")
        except ValueError:
            print("Digite um n√∫mero v√°lido.")
 
    while True:
        email = input("Email: ").strip().lower()
        if email_valido(email):
            break
        print("‚ùå Email inv√°lido. Tente novamente.")
 
    senha = getpass("Crie uma senha segura: ")
 
    dados = carregar_dados()
 
    if email in dados:
        print("‚ùå Usu√°rio j√° cadastrado.")
        return
 
    print("\n" + TERMO_LGPD)
    confirm = input("Digite 'sim' para continuar: ").strip().lower()
    if confirm != "sim":
        print("Cadastro cancelado.")
        return
 
    dados[email] = {
        "nome": nome,
        "idade": idade,
        "senha_hash": hash_senha(senha),
        "acessos": []
    }
 
    salvar_dados(dados)
    print("‚úÖ Usu√°rio cadastrado com sucesso!")
 
def login():
    print("\nüîê Login")
    tentativas = 3
    dados = carregar_dados()
 
    while tentativas > 0:
        email = input("Email: ").strip().lower()
        senha = getpass("Senha: ")
 
        user = dados.get(email)
        if user and user["senha_hash"] == hash_senha(senha):
            print(f"üëã Bem-vindo(a), {user['nome']}!")
            inicio = time.time()
            input("Pressione Enter para encerrar a sess√£o...")
            duracao = round(time.time() - inicio)
            user["acessos"].append(duracao)
            salvar_dados(dados)
            print(f"‚è±Ô∏è Sess√£o registrada: {duracao} segundos.")
            return
 
        tentativas -= 1
        print(f"‚ùå Dados inv√°lidas. Tentativas restantes: {tentativas}")
 
    print("üîí Tentativas excedidas. Tente novamente mais tarde.")
 
def redefinir_senha():
    print("\nüîÑ Redefini√ß√£o de Senha")
    email = input("Email: ").strip().lower()
    dados = carregar_dados()
 
    if email not in dados:
        print("‚ùå Email n√£o encontrado.")
        return
 
    nova_senha = getpass("Nova senha: ")
    confirm = getpass("Confirme a nova senha: ")
 
    if nova_senha != confirm:
        print("‚ùå As senhas n√£o coincidem.")
        return
 
    dados[email]["senha_hash"] = hash_senha(nova_senha)
    salvar_dados(dados)
    print("üîê Senha atualizada com sucesso.")
 
def modulo_logica_computacional():
    print("\nüìò M√≥dulo: L√≥gica Computacional")
    print("Pergunta: Qual o pr√≥ximo n√∫mero na sequ√™ncia: 2, 4, 6, 8, __?")
    tentativas = 3
    while tentativas > 0:
        resposta = input("Resposta: ").strip()
        if resposta == "10":
            print("‚úÖ Correto!")
            return
        else:
            tentativas -= 1
            if tentativas > 0:
                print(f"‚ùå Tente novamente. Tentativas restantes: {tentativas}")
            else:
                print("‚ùå N√∫mero m√°ximo de tentativas ja foi atingido. A resposta correta seria 10.")
 
def modulo_programacao_python():
    print("\nüíª M√≥dulo: Programa√ß√£o em Python")
    nome = input("Digite seu nome: ")
    print(f"Ol√°, {nome}! Vamos somar dois n√∫meros?")
    while True:
        try:
            x = int(input("N√∫mero 1: "))
            y = int(input("N√∫mero 2: "))
            break
        except ValueError:
            print("Digite valores v√°lidos.")
    print(f"Resultado: {x} + {y} = {x + y}")
    print("üéâ Parab√©ns, voc√™ somou 2 n√∫meros.")
 
def relatorios_estatisticos():
    print("\nüìä Relat√≥rios Estat√≠sticos")
    dados = carregar_dados()
    idades = [user["idade"] for user in dados.values()]
    acessos = [len(user["acessos"]) for user in dados.values()]
 
    if not idades:
        print("Nenhum dado dispon√≠vel.")
        return
 
    print(f"üë• Idades - M√©dia: {statistics.mean(idades):.2f}, Mediana: {statistics.median(idades)}, Moda: {statistics.mode(idades)}")
    print(f"üïí Acessos - M√©dia: {statistics.mean(acessos):.2f}, Mediana: {statistics.median(acessos)}, Moda: {statistics.mode(acessos)}")
 
    print("\nüèÜ Top usu√°rios por tempo total de acesso:")
    ranking = sorted(
        dados.items(),
        key=lambda item: sum(item[1]["acessos"]),
        reverse=True
    )
    for i, (email, user) in enumerate(ranking[:3], start=1):
        total = sum(user["acessos"])
        print(f"{i}¬∫ {user['nome']} ({email}) - {total} segundos")
 
def menu():
    while True:
        os.system("cls" if os.name == "nt" else "clear")
        print("\n=== üéì Plataforma de Educa√ß√£o Digital ===")
        print("1Ô∏è‚É£  Cadastrar usu√°rio")
        print("2Ô∏è‚É£  Fazer login")
        print("3Ô∏è‚É£  Relat√≥rios estat√≠sticos")
        print("4Ô∏è‚É£  L√≥gica Computacional")
        print("5Ô∏è‚É£  Programa√ß√£o em Python")
        print("6Ô∏è‚É£  Redefinir senha")
        print("7Ô∏è‚É£  Sair")
 
        opcao = input("Escolha uma op√ß√£o: ").strip()
       
        if not opcao.isdigit():
            print("Op√ß√£o inv√°lida. Por favor, digite um n√∫mero de 1 a 7.")
        elif opcao == "1":
            cadastrar_usuario()
        elif opcao == "2":
            login()
        elif opcao == "3":
            relatorios_estatisticos()
        elif opcao == "4":
            modulo_logica_computacional()
        elif opcao == "5":
            modulo_programacao_python()
        elif opcao == "6":
            redefinir_senha()
        elif opcao == "7":
            print("üëã At√© logo!")
            break
        else:
            print("Op√ß√£o inv√°lida. Por favor, digite um n√∫mero de 1 a 7.")
 
        input("\nPressione Enter para continuar...")
 
if __name__ == "__main__":
    menu()
